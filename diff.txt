diff --git a/frontend/src/app/api/order/resolver.ts b/frontend/src/app/api/order/resolver.ts
index 3499b03..1121b79 100644
--- a/frontend/src/app/api/order/resolver.ts
+++ b/frontend/src/app/api/order/resolver.ts
@@ -25,21 +25,38 @@ export const deploySrcCallData = (
 ) => {
   // Removed client-side logging to reduce noise
 
-  const { r, yParityAndS: vs } = Signature.from(signature);
+  const sig = Signature.from(signature);
+  const rHex = sig.r;
+  const sHex = sig.s;
+  const vValue = sig.v;
 
-  // Ensure r and vs are proper 32-byte hex strings (bytes32)
-  const rHex =
-    typeof r === "string" ? r : (r as { toString(): string }).toString();
-  const vsHex =
-    typeof vs === "string" ? vs : (vs as { toString(): string }).toString();
+  // Ensure r and s are proper 32-byte hex strings (bytes32)
+  const rHexString = typeof rHex === "string" ? rHex : String(rHex);
+  const sHexString = typeof sHex === "string" ? sHex : String(sHex);
+
+  // Calculate vs: s with recovery ID (v) encoded in the high bit
+  // vs = s + (v << 255) where v is 0 or 1
+  const sBigInt = BigInt(sHexString);
+  const vsBigInt = sBigInt + (BigInt(vValue) << BigInt(255));
+  const vsHex = "0x" + vsBigInt.toString(16).padStart(64, "0");
 
   // Validate that r and vs are proper 32-byte hex strings
-  if (!rHex.startsWith("0x") || rHex.length !== 66) {
-    throw new Error(`Invalid r value: ${rHex} (expected 32-byte hex string)`);
+  if (!rHexString.startsWith("0x") || rHexString.length !== 66) {
+    throw new Error(
+      `Invalid r value: ${rHexString} (expected 32-byte hex string)`
+    );
   }
   if (!vsHex.startsWith("0x") || vsHex.length !== 66) {
     throw new Error(`Invalid vs value: ${vsHex} (expected 32-byte hex string)`);
   }
+
+  console.log("[DEBUG] Signature components:", {
+    r: rHexString,
+    s: sHexString,
+    v: vValue,
+    vs: vsHex,
+    originalSignature: signature,
+  });
   const { trait } = takerTraits as { args: unknown; trait: unknown };
 
   // Helper function to convert address string to uint256 BigInt
@@ -100,7 +117,7 @@ export const deploySrcCallData = (
         typeof value === "bigint" ? value.toString() : value
       )
     );
-    console.log("DEBUG: rHex:", rHex);
+    console.log("DEBUG: rHex:", rHexString);
     console.log("DEBUG: vsHex:", vsHex);
     console.log("DEBUG: amount:", amount);
     console.log("DEBUG: trait:", trait);
@@ -110,7 +127,7 @@ export const deploySrcCallData = (
       [
         immutablesTuple,
         orderTuple,
-        rHex,
+        rHexString,
         vsHex,
         BigInt(amount),
         BigInt(trait as string | number),
@@ -127,7 +144,7 @@ export const deploySrcCallData = (
       // Include tuple data for contract interface fallback
       immutablesTuple,
       orderTuple,
-      rHex,
+      rHex: rHexString,
       vsHex,
     };
   } catch (error) {
